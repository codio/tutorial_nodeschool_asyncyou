With {italic}async.each{/italic} results of the asynchronous function is
lost.

This is were {italic}async.map{/italic} comes in. It does the same thing as
{italic}async.each{/italic} by calling an asynchronous iterator function on 
an array but collects the results of the asynchronous iterator function 
and passes it to the results callback. The results is an array that is in 
the same order as the original array.

For example the example in the EACH problem can be written as;

    var http = require('http')
      , async = require('async');

    async.map(['cat', 'meerkat', 'penguin'], function(item, done){
      var opts = {
        hostname: 'http://httpbin.org',
        path: '/post',
        method: 'POST'
      };
      var body = '';
      var req = http.request(opts, function(res){
        res.on('data', function(chunk){
          body += chunk.toString();
        });

        res.on('end', function(){
         return done(null, body);
        });
      });

      req.write(item);
      req.end();
    },
    function(err, results){
      if (err) return console.log(err);
      // results is an array of the response bodies in the same order
    });

Write a program that will receive two command-line arguments to two URLs.
Using {italic}http.get{/italic} create two GET requests to these URLs.
You will need to use {italic}async.map{/italic} and console.log the
result array.
